services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    command: sh -c "npm ci && npm run start:dev"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=task
      - DATABASE_PASSWORD=task
      - DATABASE_NAME=taskdb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
      - api_node_modules:/usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    command: sh -c "npm ci && npm run worker:dev"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=task
      - DATABASE_PASSWORD=task
      - DATABASE_NAME=taskdb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - .:/usr/src/app
      - api_node_modules:/usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=task
      - POSTGRES_PASSWORD=task
      - POSTGRES_DB=taskdb
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U task -d taskdb']
      interval: 5s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer:latest
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    command: ['redis-server', '--appendonly', 'yes']
    ports:
      - '6379:6379'
    volumes:
      - redisdata:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 20

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - '5540:5540'
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.7
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - '9092:9092'
    volumes:
      - kafkadata:/bitnami/kafka
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1',
        ]
      interval: 10s
      timeout: 10s
      retries: 12

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - '8081:8080'
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka

volumes:
  api_node_modules:
  pgdata:
  redisdata:
  kafkadata:
